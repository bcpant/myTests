#------------------------------------------------------------------------------------------  
#                                   Что такое ООП?                 
#------------------------------------------------------------------------------------------ 
# ООП (Объектно-ориентированное программирование) - это мутодология программирования, основанная
# на представление программы в виде совокупности объектов, каждый из которых является экземпляром
# определенного класса, а классы образуют иерархию наследования.
#------------------------------------------------------------------------------------------  
#                                   Базовые принципы ООП:
#                  абстракция, наследование, полиморфизм, инкапсуляция                 
#------------------------------------------------------------------------------------------
# Абстракция - это использование только тех характеристик объекта, которые с достаточной точностью
# представляют его. Нужно представить объект минимальным набором полей и методов и при этом с доста-
# точной точностью для решаемой задачи.
#------------------------------------------------------------------------------------------
# Наследование - это принцип ООП согласно которому мы можем создать некоторый класс на основе другого
# класса. Дочерний класс получает функционал родительского класса.
"""class Animal:
    raise NotImplemented

class Dog(Animal):
    raise NotImplemented"""

#------------------------------------------------------------------------------------------
#                       Когда лучше использовать наследование, а когда композицию?
#------------------------------------------------------------------------------------------
# Композиция это класс, который содержит атрибуты другого класса/объекта, как часть своего функционала

#               class C:
#                   a = A()
#
# Наследование используется, если нам нужен весь функционал родительского класса.
# Если нам нужен функционал, но, возможно, нам потребуется переопределить на функционал из
# другого класса, либо же мы хотим обращаться к родительскому классу как к атрибуту, то мы используем композиицию
#------------------------------------------------------------------------------------------
# Инкапсуляция - объединение переменных и функций, которые имеют общие цели в классе
# Инкапсуляция - разграничение абстракций от реализации. (сеттеры, геттеры)
#------------------------------------------------------------------------------------------
# Полиморфизм делится на 2 типа: ad hoc полиморфизм и параметрический.
# Параметрический полиморфизм означает, что есть какая-либо функция, выполнение которой не зависит от типа  данных 
# параметра, который она принимает
class A:
    def hi(self):
        print(f"Hi from A!")
class B:
    def hi(self):
        print(f"Hi from B!")
def some(obj):
    obj.hi()

#------------------------------------------------------------------------------------------
# AD HOC - полиморфизм, когда функция имеет множество имплементаций в зависимости от типа входящего 
# элемента. 
# В Python нет такого функционала, но мы можем сами его реализовать.
#------------------------------------------------------------------------------------------
def to_json(value):
    if isinstance(value, int):
        pass
    if isinstance(value, float):
        pass
    if isinstance(value, str):
        pass
    if isinstance(value, list):
        pass
#------------------------------------------------------------------------------------------
#                       Что такое миксин? Отличие от обычного класса?
#------------------------------------------------------------------------------------------ 

class Document:
    pass
class FileUploadMixin:
    pass
class FinalDocument(Document, FileUploadMixin):
    pass   

#  Миксин - это "подмешивание" некоторого функционала в класс, с помощью множественного наследования.