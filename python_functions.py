#------------------------------------------------------------------------------------------
#                                          FUNCTIONS
#------------------------------------------------------------------------------------------
# Что такое функция? Каковы её преимущества?
#------------------------------------------------------------------------------------------
# Функция - именованный блок кода, к которому можно обратиться (вызвать) из другого места
# программы. Преимущество - повторное использование, избегание повторов блока кода (DRY)
#------------------------------------------------------------------------------------------
# Какой будет результат выполнения функции, если в ней нет оператора return?
#------------------------------------------------------------------------------------------
#                                   Вернёт None!
#------------------------------------------------------------------------------------------
def some():
    pass
a = some()
print(a) # result -> None
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
# Что такое аннотации типов? Зачем они нужны? Когда выполняются?
#------------------------------------------------------------------------------------------
# Аннотация типов - это своеобразные подсказки, позволяющие понять, какого типа элемент мы хотим получить.
#------------------------------------------------------------------------------------------
def some(a: int) -> int:
    return a ** 2
# Эти подсказки для самих программистов, чтобы IDE подсказывали, если не тот тип передан в функцию.
# Не обновляются в runtime! 
#------------------------------------------------------------------------------------------


# Как в python передаются аргументы в функцию?
#------------------------------------------------------------------------------------------
# Есть два типа передачи аргумента в функцию: по ссылке и по значению
# В python все аргументы в функцию передаются по ссылке.
#------------------------------------------------------------------------------------------
a = [1, 2, 3]
def some(arg):
    print(arg is a)

some(a) # result -> True


#------------------------------------------------------------------------------------------
# Что будет, если использовать значение изменяемого типа в качестве аргумента по умолчанию в функции?
# Как этого избежать?
#------------------------------------------------------------------------------------------
def some(a=[]):
    a.append(1)
    return a
print(some()) # [1]
print(some([]))# [1]
print(some())# [1, 1] -так как в памяти остаётся список по умолчанию, в который мы уже добавляли единицу.
print(some([]))# [1]

# Теперь вернёт единицы:
def some(a=None):
    if a is None:
        a = []
    a.append(1)
    return a 
   
#------------------------------------------------------------------------------------------
# Что такое *args и **kwargs?
# Какие типы данных для них используются?
#------------------------------------------------------------------------------------------
# Это ключевые слова, которые позволяют использовать неограниченное количество элементов.
# Их можно использовать, когда мы сами не знаем, сколько аргументов нам потребуется.
# *args - для передачи позиционных аргументов. (используется кортеж)
# **kwargs - для передачи аргументов ключ : значение. (используется словарь)
#------------------------------------------------------------------------------------------
def some(*args, **kwargs):
    pass    
some(1, 2, 3, a = 1, b = 2, c = 3)

#------------------------------------------------------------------------------------------
# Что такое lambda функция? Примеры.
#------------------------------------------------------------------------------------------
# lambda функция - это функция без имени. Какая-то короткая функция, которая выполняет одно действие,
# и нам не нужно для этого выделять отдельное имя.
#------------------------------------------------------------------------------------------

a = {
    1:3,
    2:2,
    3:1,
}
print(max(a)) # result -> 3 (ключ с самым большим значением)
print(max(a, key=lambda x: a[x])) # result -> 3 (самое больше значение из всех ключей)
#------------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------------
# Что такое рекурсия? Какие ограничения есть у рекурсии в Python?
# Расскажи о плюсах и минусах использования рекурсии.
#------------------------------------------------------------------------------------------

# Рекурсия - это вызов функции внутри своего тела.
# Плюсы: код будет относительно просто выглядеть.
# Минусы: используется больше памяти, чем в решении задачи с помощью цикла.

# Python накладывает ограничение в 1000 вызовов рекурсии
import sys
print(sys.getrecursionlimit()) # result -> 1000
sys.setrecursionlimit(2000) # устанавливаем лимит 2000
# Это значит, что если рекурсия вызовется тысячу раз, то в результате мы получим ошибку.